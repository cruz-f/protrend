# Generated by Django 3.2.12 on 2022-07-22 17:18

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('institution', models.CharField(blank=True, max_length=200, verbose_name='institution')),
                ('is_active', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EffectorCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protrend_id', models.CharField(blank=True, help_text='Universal identifier of the ProTReND database', max_length=100)),
                ('name', models.CharField(help_text='The name for this item which will be used as main identifier', max_length=250)),
                ('kegg_compounds', models.CharField(blank=True, help_text='A list of KEGG compound identifiers associated with this effector', max_length=50)),
                ('evidence', models.CharField(blank=True, help_text='The name for this item which will be used as main identifier', max_length=250)),
                ('pmid', models.IntegerField(blank=True, help_text='The PubMed identifier for this publication', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='effectors', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Effector',
                'verbose_name_plural': 'Effectors',
            },
        ),
        migrations.CreateModel(
            name='GeneCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protrend_id', models.CharField(blank=True, help_text='Universal identifier of the ProTReND database', max_length=100)),
                ('locus_tag', models.CharField(help_text='The locus tag for this gene', max_length=100)),
                ('uniprot_accession', models.CharField(blank=True, help_text='The UniProt accession for this protein', max_length=50)),
                ('name', models.CharField(blank=True, help_text='The name for this gene/protein', max_length=50)),
                ('function', models.CharField(blank=True, help_text='The function for this protein', max_length=250)),
                ('description', models.TextField(blank=True, help_text='The description for this protein')),
                ('ncbi_gene', models.CharField(blank=True, help_text='The NCBI gene identifier', max_length=50)),
                ('ncbi_protein', models.CharField(blank=True, help_text='The NCBI protein identifier', max_length=50)),
                ('genbank_accession', models.CharField(blank=True, help_text='The NCBI GenBank accession', max_length=50)),
                ('refseq_accession', models.CharField(blank=True, help_text='The NCBI RefSeq accession', max_length=50)),
                ('gene_sequence', models.TextField(blank=True)),
                ('protein_sequence', models.TextField(blank=True, help_text='The protein sequence for this protein')),
                ('strand', models.CharField(blank=True, choices=[('forward', 'forward'), ('reverse', 'reverse'), ('unknown', 'unknown')], help_text='The strand corresponds to the genomic coordinate forward or reverse', max_length=50)),
                ('start', models.IntegerField(blank=True, help_text='The start corresponds to the genomic coordinate of the item position in the genome sequence', null=True)),
                ('stop', models.IntegerField(blank=True, help_text='The stop corresponds to the genomic coordinate of the item position in the genome sequence', null=True)),
                ('evidence', models.CharField(blank=True, help_text='The name for this item which will be used as main identifier', max_length=250)),
                ('pmid', models.IntegerField(blank=True, help_text='The PubMed identifier for this publication', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Gene',
                'verbose_name_plural': 'Genes',
            },
        ),
        migrations.CreateModel(
            name='TFBSCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protrend_id', models.CharField(blank=True, help_text='Universal identifier of the ProTReND database', max_length=100)),
                ('sequence', models.TextField(help_text='The binding sequence for this TFBS')),
                ('strand', models.CharField(blank=True, choices=[('forward', 'forward'), ('reverse', 'reverse'), ('unknown', 'unknown')], help_text='The strand corresponds to the genomic coordinate forward or reverse', max_length=50)),
                ('start', models.IntegerField(blank=True, help_text='The start corresponds to the genomic coordinate of the item position in the genome sequence', null=True)),
                ('stop', models.IntegerField(blank=True, help_text='The stop corresponds to the genomic coordinate of the item position in the genome sequence', null=True)),
                ('evidence', models.CharField(blank=True, help_text='The name for this item which will be used as main identifier', max_length=250)),
                ('pmid', models.IntegerField(blank=True, help_text='The PubMed identifier for this publication', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tfbss', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'TFBS',
                'verbose_name_plural': 'TFBSs',
            },
        ),
        migrations.CreateModel(
            name='RegulatorCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protrend_id', models.CharField(blank=True, help_text='Universal identifier of the ProTReND database', max_length=100)),
                ('locus_tag', models.CharField(help_text='The locus tag for this gene', max_length=100)),
                ('uniprot_accession', models.CharField(blank=True, help_text='The UniProt accession for this protein', max_length=50)),
                ('name', models.CharField(blank=True, help_text='The name for this gene/protein', max_length=50)),
                ('function', models.CharField(blank=True, help_text='The function for this protein', max_length=250)),
                ('description', models.TextField(blank=True, help_text='The description for this protein')),
                ('mechanism', models.CharField(choices=[('transcription factor', 'transcription factor'), ('transcription attenuator', 'transcription attenuator'), ('transcription terminator', 'transcription terminator'), ('sigma factor', 'sigma factor'), ('small rna (srna)', 'small RNA (sRNA)'), ('unknown', 'unknown')], help_text='The regulatory mechanism associated to this regulator', max_length=50)),
                ('ncbi_gene', models.CharField(blank=True, help_text='The NCBI gene identifier', max_length=50)),
                ('ncbi_protein', models.CharField(blank=True, help_text='The NCBI protein identifier', max_length=50)),
                ('genbank_accession', models.CharField(blank=True, help_text='The NCBI GenBank accession', max_length=50)),
                ('refseq_accession', models.CharField(blank=True, help_text='The NCBI RefSeq accession', max_length=50)),
                ('gene_sequence', models.TextField(blank=True)),
                ('protein_sequence', models.TextField(blank=True, help_text='The protein sequence for this protein')),
                ('strand', models.CharField(blank=True, choices=[('forward', 'forward'), ('reverse', 'reverse'), ('unknown', 'unknown')], help_text='The strand corresponds to the genomic coordinate forward or reverse', max_length=50)),
                ('start', models.IntegerField(blank=True, help_text='The start corresponds to the genomic coordinate of the item position in the genome sequence', null=True)),
                ('stop', models.IntegerField(blank=True, help_text='The stop corresponds to the genomic coordinate of the item position in the genome sequence', null=True)),
                ('evidence', models.CharField(blank=True, help_text='The name for this item which will be used as main identifier', max_length=250)),
                ('pmid', models.IntegerField(blank=True, help_text='The PubMed identifier for this publication', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regulators', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Regulator',
                'verbose_name_plural': 'Regulators',
            },
        ),
        migrations.CreateModel(
            name='OrganismCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protrend_id', models.CharField(blank=True, help_text='Universal identifier of the ProTReND database', max_length=100)),
                ('name', models.CharField(help_text='The scientific name for this organism including strain name whenever possible', max_length=250)),
                ('ncbi_taxonomy', models.IntegerField(help_text='The NCBI taxonomy identifier')),
                ('species', models.CharField(blank=True, help_text='The scientific name for this species', max_length=150)),
                ('strain', models.CharField(blank=True, help_text='The strain for this species', max_length=150)),
                ('refseq_accession', models.CharField(blank=True, help_text='The NCBI RefSeq accession', max_length=50)),
                ('genbank_accession', models.CharField(blank=True, help_text='The NCBI GenBank accession', max_length=50)),
                ('ncbi_assembly', models.IntegerField(blank=True, help_text='The NCBI Assembly identifier for the organism genome sequence', null=True)),
                ('assembly_accession', models.CharField(blank=True, help_text='The NCBI Assembly accession for the organism genome sequence', max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organisms', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Organism',
                'verbose_name_plural': 'Organisms',
            },
        ),
        migrations.CreateModel(
            name='InteractionCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protrend_id', models.CharField(blank=True, help_text='Universal identifier of the ProTReND database', max_length=100)),
                ('regulatory_effect', models.CharField(choices=[('activation', 'activation'), ('repression', 'repression'), ('dual', 'dual'), ('unknown', 'unknown')], help_text='The regulatory effect (eg activation, repression, dual and unknown) of this regulatory interaction', max_length=50)),
                ('evidence', models.CharField(blank=True, help_text='The name for this item which will be used as main identifier', max_length=250)),
                ('pmid', models.IntegerField(blank=True, help_text='The PubMed identifier for this publication', null=True)),
                ('effector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='community.effectorcommunity', verbose_name='Effector')),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='community.genecommunity', verbose_name='Gene')),
                ('organism', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='community.organismcommunity', verbose_name='Organism')),
                ('regulator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='community.regulatorcommunity', verbose_name='Regulator')),
                ('tfbs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='community.tfbscommunity', verbose_name='TFBS')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Interaction',
                'verbose_name_plural': 'Interactions',
            },
        ),
    ]
